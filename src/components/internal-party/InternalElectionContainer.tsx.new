import React, { useState } from "react";
import { AlertCircle, CheckCircle } from "lucide-react";
import Loading from "../Loading";
import AdminUnitFilters from "../AdminUnitFilters";
import GenericInternalTable from "./GenericInternalTable";
import CandidateFormModal from "./CandidateFormModal";
import CandidateDetailsModal from "../CandidateDetailsModal";
import internalPartyElectionsConfig from "../../config/intenal_party_elections_config.json";
import {
  useGetInternalPartyCandidatesQuery,
  useCreateInternalPartyCandidateMutation,
  useUpdateInternalPartyCandidateMutation,
  useDeleteInternalPartyCandidateMutation,
  useGetAvailableRegionsQuery,
  useGetAvailableSubregionsQuery,
  useGetAvailableDistrictsQuery,
  useGetAvailableConstituenciesQuery,
  useGetAvailableSubcountiesQuery,
  useGetAvailableParishesQuery,
  useGetAvailableVillagesQuery,
} from "../../store/api/internal_elections_api";

interface Candidate {
  id?: number;
  firstName: string;
  lastName: string;
  ninNumber: string;
  phoneNumber: string;
  electionType: string;
  gender?: string;
}

interface CandidateParticipation {
  id: number;
  candidateId: number;
  electionType: string;
  level: string;
  positionPath: string;
  category: string;
  position: string;
  regionId?: number;
  subregionId?: number;
  districtId?: number;
  constituencyMunicipalityId?: number;
  subcountyDivisionId?: number;
  parishWardId?: number;
  villageCellId?: number;
  year: number;
  status: string;
  isQualified: boolean;
  vote: number;
  candidate?: Candidate;
  region?: { id: number; name: string; };
  subregion?: { id: number; name: string; };
  district?: { id: number; name: string; };
  constituencyMunicipality?: { id: number; name: string; };
  subcountyDivision?: { id: number; name: string; };
  parishWard?: { id: number; name: string; };
  villageCell?: { id: number; name: string; };
}

interface InternalElectionContainerProps {
  level: string; // e.g., "DISTRICT", "CONSTITUENCY_MUNICIPALITY", etc.
}

const InternalElectionContainer: React.FC<InternalElectionContainerProps> = ({ level }) => {
  const [adminFilters, setAdminFilters] = useState<any>({});
  const [searchTerm, setSearchTerm] = useState("");
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingCandidate, setEditingCandidate] = useState<CandidateParticipation | null>(null);
  const [newCandidate, setNewCandidate] = useState<Partial<CandidateParticipation>>({});
  const [operationResult, setOperationResult] = useState<{ success: boolean; message: string } | null>(null);
  const [selectedCandidate, setSelectedCandidate] = useState<any>(null);

  // Get data from API
  const {
    data: candidates,
    isLoading,
    refetch,
  } = useGetInternalPartyCandidatesQuery({
    level,
    ...adminFilters,
  });
  
  // Add these data fetching hooks for location filtering
  const { data: availableRegions = [] } = useGetAvailableRegionsQuery({ level });
  
  const { data: availableSubregions = [] } = useGetAvailableSubregionsQuery(
    adminFilters.regionId ? { regionId: adminFilters.regionId } : { regionId: 0 },
    { skip: !adminFilters.regionId }
  );
  
  const { data: availableDistricts = [] } = useGetAvailableDistrictsQuery(
    adminFilters.subregionId ? { subregionId: adminFilters.subregionId } : { subregionId: 0 },
    { skip: !adminFilters.subregionId }
  );
  
  const { data: availableConstituencies = [] } = useGetAvailableConstituenciesQuery(
    adminFilters.districtId ? { districtId: adminFilters.districtId } : { districtId: 0 },
    { skip: !adminFilters.districtId }
  );
  
  const { data: availableSubcounties = [] } = useGetAvailableSubcountiesQuery(
    adminFilters.constituencyMunicipalityId 
      ? { constituencyMunicipalityId: adminFilters.constituencyMunicipalityId } 
      : { constituencyMunicipalityId: 0 },
    { skip: !adminFilters.constituencyMunicipalityId }
  );
  
  const { data: availableParishes = [] } = useGetAvailableParishesQuery(
    adminFilters.subcountyDivisionId
      ? { subcountyDivisionId: adminFilters.subcountyDivisionId }
      : { subcountyDivisionId: 0 },
    { skip: !adminFilters.subcountyDivisionId }
  );
  
  const { data: availableVillages = [] } = useGetAvailableVillagesQuery(
    adminFilters.parishWardId
      ? { parishWardId: adminFilters.parishWardId }
      : { parishWardId: 0 },
    { skip: !adminFilters.parishWardId }
  );

  // Mutations
  const [createCandidate] = useCreateInternalPartyCandidateMutation();
  const [updateCandidate] = useUpdateInternalPartyCandidateMutation();
  const [deleteCandidate] = useDeleteInternalPartyCandidateMutation();

  // Dynamic category/position/subcategory logic based on level
  const levelConfig = internalPartyElectionsConfig?.INTERNAL_PARTY?.[level] || {};
  const categories = Object.keys(levelConfig);
  const [selectedCategory, setSelectedCategory] = useState<string>("");
  const [selectedSubcategory, setSelectedSubcategory] = useState<string>("");
  const [selectedPosition, setSelectedPosition] = useState<string>("");

  const categoryValue = levelConfig[selectedCategory];
  const isDirectPosition = categoryValue === null;
  const subcategories = categoryValue && typeof categoryValue === "object"
    ? Object.keys(categoryValue)
    : [];
  const isSubcategory = subcategories.length > 0 && categoryValue && typeof categoryValue === "object";
  const subcategoryValue = isSubcategory ? categoryValue[selectedSubcategory] : null;
  const subcategoryIsDirectPosition = subcategoryValue === null;
  const positions = subcategoryValue && typeof subcategoryValue === "object"
    ? Object.keys(subcategoryValue)
    : [];

  // Handlers
  const handleAdd = async () => {
    setIsModalOpen(true);
    setEditingCandidate(null);
    setSelectedCategory("");
    setSelectedSubcategory("");
    setSelectedPosition("");
    setNewCandidate({
      electionType: "INTERNAL_PARTY",
      level,
      year: new Date().getFullYear(),
      status: "pending",
      isQualified: false,
      vote: 0,
      candidate: {
        id: 0,
        firstName: "",
        lastName: "",
        ninNumber: "",
        phoneNumber: "",
        gender: "",
        electionType: "INTERNAL_PARTY"
      },
    });
  };

  const handleEdit = (candidate: CandidateParticipation) => {
    setIsModalOpen(true);
    setEditingCandidate(candidate);
    setNewCandidate(candidate);
    
    // Set category, subcategory, and position based on candidate's data
    const parts = candidate.positionPath.split('.');
    if (parts.length >= 3) {
      // INTERNAL_PARTY.LEVEL.CATEGORY
      setSelectedCategory(parts[2]);
      
      if (parts.length >= 4) {
        // For subcategories or direct positions
        if (parts.length === 4) {
          // Direct position under category
          setSelectedPosition(parts[3]);
        } else {
          // Subcategory and position
          setSelectedSubcategory(parts[3]);
          if (parts.length >= 5) {
            setSelectedPosition(parts[4]);
          }
        }
      }
    }
  };

  const handleDelete = async (id: number) => {
    if (window.confirm("Are you sure you want to delete this candidate?")) {
      try {
        await deleteCandidate(id).unwrap();
        setOperationResult({
          success: true,
          message: "Candidate deleted successfully",
        });
        setTimeout(() => {
          setOperationResult(null);
        }, 3000);
      } catch (error) {
        setOperationResult({
          success: false,
          message: "Failed to delete candidate",
        });
        setTimeout(() => {
          setOperationResult(null);
        }, 3000);
      }
    }
  };

  const handleSave = async () => {
    try {
      // Construct the position path
      let positionPath = `INTERNAL_PARTY.${level}.${selectedCategory}`;
      
      if (isSubcategory && selectedSubcategory) {
        positionPath += `.${selectedSubcategory}`;
        
        if (!subcategoryIsDirectPosition && selectedPosition) {
          positionPath += `.${selectedPosition}`;
        }
      } else if (!isDirectPosition && selectedPosition) {
        positionPath += `.${selectedPosition}`;
      }

      if (editingCandidate) {
        // Update existing candidate
        await updateCandidate({
          id: editingCandidate.id,
          updates: {
            positionPath,
            category: selectedCategory,
            position: selectedPosition || selectedSubcategory || selectedCategory,
            regionId: newCandidate.regionId,
            subregionId: newCandidate.subregionId,
            districtId: newCandidate.districtId,
            constituencyMunicipalityId: newCandidate.constituencyMunicipalityId,
            subcountyDivisionId: newCandidate.subcountyDivisionId,
            parishWardId: newCandidate.parishWardId,
            villageCellId: newCandidate.villageCellId,
            // Don't include the candidate object in the update
          },
        }).unwrap();
        setOperationResult({
          success: true,
          message: "Candidate updated successfully",
        });
      } else {
        // Create new candidate
        await createCandidate({
          ...newCandidate,
          positionPath,
          category: selectedCategory,
          position: selectedPosition || selectedSubcategory || selectedCategory,
        }).unwrap();
        setOperationResult({
          success: true,
          message: "Candidate created successfully",
        });
      }

      setIsModalOpen(false);
      refetch();
      
      setTimeout(() => {
        setOperationResult(null);
      }, 3000);
    } catch (error) {
      setOperationResult({
        success: false,
        message: editingCandidate
          ? "Failed to update candidate"
          : "Failed to create candidate",
      });
      setTimeout(() => {
        setOperationResult(null);
      }, 3000);
    }
  };

  // Filter candidates by search term
  const filteredCandidates = candidates?.filter((candidate) => {
    if (!searchTerm) return true;
    
    const fullName = `${candidate.candidate?.firstName} ${candidate.candidate?.lastName}`.toLowerCase();
    const searchLower = searchTerm.toLowerCase();
    
    return (
      fullName.includes(searchLower) ||
      candidate.candidate?.ninNumber?.toLowerCase().includes(searchLower) ||
      candidate.candidate?.phoneNumber?.toLowerCase().includes(searchLower) ||
      candidate.position?.toLowerCase().includes(searchLower) ||
      candidate.category?.toLowerCase().includes(searchLower) ||
      (candidate.region?.name && candidate.region.name.toLowerCase().includes(searchLower)) ||
      (candidate.district?.name && candidate.district.name.toLowerCase().includes(searchLower)) ||
      (candidate.constituencyMunicipality?.name && candidate.constituencyMunicipality.name.toLowerCase().includes(searchLower)) ||
      (candidate.subcountyDivision?.name && candidate.subcountyDivision.name.toLowerCase().includes(searchLower)) ||
      (candidate.parishWard?.name && candidate.parishWard.name.toLowerCase().includes(searchLower)) ||
      (candidate.villageCell?.name && candidate.villageCell.name.toLowerCase().includes(searchLower))
    );
  }) || [];

  const clearFilters = () => {
    setAdminFilters({});
  };

  return (
    <div className="container mx-auto px-4 py-6">
      <h1 className="text-3xl font-bold mb-6">
        Internal Party Elections - {level.replace(/_/g, " ")}
      </h1>

      {operationResult && (
        <div
          className={`mb-4 p-4 rounded-md flex items-center ${
            operationResult.success
              ? "bg-green-100 text-green-700"
              : "bg-red-100 text-red-700"
          }`}
        >
          {operationResult.success ? (
            <CheckCircle size={20} className="mr-2" />
          ) : (
            <AlertCircle size={20} className="mr-2" />
          )}
          {operationResult.message}
        </div>
      )}

      <div className="bg-white rounded-lg shadow-md p-6 mb-6">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-semibold">Filters</h2>
          <button
            onClick={clearFilters}
            className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
          >
            Clear Filters
          </button>
        </div>

        <AdminUnitFilters
          level={level}
          onChange={(filters) => setAdminFilters(filters)}
        />
      </div>

      <div className="flex justify-end mb-4">
        <button
          onClick={handleAdd}
          className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
        >
          Add Candidate
        </button>
      </div>

      {isLoading ? (
        <Loading />
      ) : (
        <GenericInternalTable
          candidates={filteredCandidates}
          isLoading={isLoading}
          searchTerm={searchTerm}
          onSearchChange={setSearchTerm}
          onRowClick={(params) => setSelectedCandidate(params.row)}
          onEdit={handleEdit}
          onDelete={handleDelete}
        />
      )}

      {isModalOpen && (
        <CandidateFormModal
          open={isModalOpen}
          onClose={() => setIsModalOpen(false)}
          candidate={newCandidate}
          setCandidate={setNewCandidate}
          onSave={handleSave}
          isEditing={!!editingCandidate}
          title={editingCandidate ? "Edit Candidate" : "Add Candidate"}
          level={level}
          categories={categories}
          selectedCategory={selectedCategory}
          setSelectedCategory={setSelectedCategory}
          subcategories={subcategories}
          selectedSubcategory={selectedSubcategory}
          setSelectedSubcategory={setSelectedSubcategory}
          positions={positions}
          selectedPosition={selectedPosition}
          setSelectedPosition={setSelectedPosition}
          isDirectPosition={isDirectPosition}
          isSubcategory={isSubcategory}
          subcategoryIsDirectPosition={subcategoryIsDirectPosition}
          positionFieldName="Position"
          categoryFieldName="League/Committee"
        />
      )}

      {selectedCandidate && (
        <CandidateDetailsModal
          isOpen={!!selectedCandidate}
          onClose={() => setSelectedCandidate(null)}
          candidate={selectedCandidate}
        />
      )}
    </div>
  );
};

export default InternalElectionContainer;
